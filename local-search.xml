<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSH 教程</title>
    <link href="/2023/12/03/SSH-%E6%95%99%E7%A8%8B/"/>
    <url>/2023/12/03/SSH-%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="創建-SSH-Key"><a href="#創建-SSH-Key" class="headerlink" title="創建 SSH Key"></a>創建 SSH Key</h1><p>在 Rocky Linux 9 上創建 SSH Key 4096：</p><ol><li><p>打開終端機並使用以下命令生成 SSH Key：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">ssh-keygen -t rsa -b 4096<br></code></pre></td></tr></table></figure></li><li><p>按照提示輸入要保存 SSH Key 的文件名和路徑。</p></li><li><p>輸入一個強密碼，這樣在使用 SSH Key 時需要輸入密碼。</p></li><li><p>SSH Key 將會生成在指定的路徑中，包括私鑰（id_rsa）和公鑰（id_rsa.pub）。</p></li></ol><p>在 Ubuntu 22.04 上創建 SSH Key 4096：</p><ol><li><p>打開終端並運行以下命令生成 SSH Key：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">ssh-keygen -t rsa -b 4096<br></code></pre></td></tr></table></figure></li><li><p>按照提示輸入要保存 SSH Key 的文件名和路徑。</p></li><li><p>輸入一個強密碼，這樣在使用 SSH Key 時需要輸入密碼。</p></li><li><p>SSH Key 將會生成在指定的路徑中，包括私鑰（id_rsa）和公鑰（id_rsa.pub）。</p></li></ol><p>請注意，生成的 SSH Key 是用於身份驗證和加密通信，私鑰（id_rsa）需要保持安全，不要與他人分享。公鑰（id_rsa.pub）則可以與其他服務器或用戶共享，以便在建立 SSH 連接時進行驗證。</p><h1 id="將-SSH-Key-公鑰放入伺服器"><a href="#將-SSH-Key-公鑰放入伺服器" class="headerlink" title="將 SSH Key 公鑰放入伺服器"></a>將 SSH Key 公鑰放入伺服器</h1><p>接下來，我們將學習如何將生成的 SSH Key 的公鑰放入目標伺服器，以便在建立 SSH 連接時進行身份驗證。</p><ol><li>登入目標伺服器：</li></ol><p>使用以下命令登入目標伺服器，並輸入您的用戶名和密碼：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">ssh username@server_ip_address<br></code></pre></td></tr></table></figure><p>將 <code>username</code> 替換為您的用戶名，將 <code>server_ip_address</code> 替換為目標伺服器的 IP 地址。</p><ol start="2"><li>創建 .ssh 目錄：</li></ol><p>在目標伺服器上，輸入以下命令創建 <code>.ssh</code> 目錄（如果該目錄不存在）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">mkdir ~/.ssh<br></code></pre></td></tr></table></figure><ol start="3"><li>在目標伺服器上創建 authorized_keys 文件：</li></ol><p>輸入以下命令在目標伺服器上創建 <code>authorized_keys</code> 文件（如果該文件不存在）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">touch ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><ol start="4"><li>打開 authorized_keys 文件：</li></ol><p>使用您喜歡的文本編輯器打開 <code>authorized_keys</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">nano ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><ol start="5"><li>複製本地 SSH Key 公鑰的內容：</li></ol><p>在本地計算機上，輸入以下命令打開 <code>.ssh</code> 目錄並複製公鑰的內容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>複製該命令輸出的 SSH Key 公鑰的內容。</p><ol start="6"><li>將公鑰粘貼到 authorized_keys 文件：</li></ol><p>在目標伺服器上的 <code>authorized_keys</code> 文件中，粘貼剛才複製的 SSH Key 公鑰內容。</p><ol start="7"><li>保存並退出</li></ol><h1 id="使用-SSH-Key-登入伺服器"><a href="#使用-SSH-Key-登入伺服器" class="headerlink" title="使用 SSH Key 登入伺服器"></a>使用 SSH Key 登入伺服器</h1><p>要使用 SSH Key 登入伺服器，請按照以下步驟進行：</p><p>打開終端機並使用以下命令登入目標伺服器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh username@server_ip_address<br></code></pre></td></tr></table></figure><p>將 username 替換為您的用戶名，將 server_ip_address 替換為目標伺服器的 IP 地址。</p><p>當您第一次登入時，系統會要求您確認目標伺服器的指紋。輸入「yes」並按下 Enter 鍵確認。</p><p>系統會提示您輸入 SSH Key 的密碼。輸入您在生成 SSH Key 時設置的密碼並按下 Enter 鍵。</p><p>如果一切正常，您將成功登入目標伺服器。</p><p>如果您的 SSH Key 路徑和文件名與預設路徑不同，或者您使用了不同的 SSH Key，請使用以下命令指定 SSH Key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -i /path/to/ssh/key username@server_ip_address<br></code></pre></td></tr></table></figure><p>將 &#x2F;path&#x2F;to&#x2F;ssh&#x2F;key 替換為您的 SSH Key 的實際路徑。</p><p>這樣，您就可以使用 SSH Key 登入伺服器了。SSH Key 提供了一種安全且方便的身份驗證方式，避免了每次登入時輸入密碼的麻煩。請記得保護好您的私鑰，不要隨意分享給他人，以確保您的伺服器安全。</p><h1 id="關閉伺服器-SSH-密碼登入"><a href="#關閉伺服器-SSH-密碼登入" class="headerlink" title="關閉伺服器 SSH 密碼登入"></a>關閉伺服器 SSH 密碼登入</h1><p>關閉伺服器 SSH 密碼登入</p><p>為了進一步增強伺服器的安全性，我們可以關閉 SSH 密碼登入，僅允許使用 SSH Key 進行身份驗證。下面是關閉伺服器 SSH 密碼登入的步驟：</p><ol><li><p>登入目標伺服器：</p><p> 使用以下命令登入目標伺服器，並輸入您的用戶名和密碼：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">ssh username@server_ip_address<br></code></pre></td></tr></table></figure><p> 將 <code>username</code> 替換為您的用戶名，將 <code>server_ip_address</code> 替換為目標伺服器的 IP 地址。</p></li><li><p>修改 SSH 配置文件：</p><p> 使用以下命令打開 SSH 配置文件：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo nano /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p> 在文件中找到以下行：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other"># PasswordAuthentication yes<br></code></pre></td></tr></table></figure><p> 將其修改為：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">PasswordAuthentication no<br></code></pre></td></tr></table></figure><p> 保存文件並關閉編輯器。</p></li><li><p>重新啟動 SSH 服務：</p><p> 使用以下命令重新啟動 SSH 服務：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo systemctl restart sshd<br></code></pre></td></tr></table></figure></li><li><p>驗證設置生效：</p><p> 現在，嘗試使用密碼登入目標伺服器，您應該會收到 “Permission denied, please try again.” 的錯誤訊息。</p></li></ol><p>現在，您已成功關閉伺服器的 SSH 密碼登入，僅允許使用 SSH Key 進行身份驗證。這提高了您伺服器的安全性，因為 SSH Key 比密碼更難以破解。在使用 SSH Key 登入伺服器之前，請確保您定期備份 SSH Key 的私鑰和公鑰。這樣可以防止意外丟失或損壞這些關鍵文件。</p><p>建議將 SSH Key 的私鑰和公鑰備份到安全的位置，例如外部硬碟、雲端存儲或加密的存儲介質中。</p><p>如果私鑰丟失或損壞，您將無法登入伺服器，並需要創建新的 SSH Key。</p><p>除了定期備份，請記得對備份文件進行適當的安全保護，以防止未經授權的訪問或損壞。</p><p>使用 SSH Key 登入多個伺服器</p><p>如果您需要在多個伺服器之間進行頻繁的 SSH 登入，創建和使用 SSH Key 可以提高效率和安全性。</p><p>您可以將相同的 SSH Key 公鑰放入多個目標伺服器的 authorized_keys 文件中。</p><p>這樣，您就可以使用同一個 SSH Key 登入多個伺服器，而不需要每次都輸入密碼。</p><p>同樣地，請確保妥善保管私鑰，以防止未經授權的訪問。</p>]]></content>
    
    
    <categories>
      
      <category>Rocky Linux 9</category>
      
      <category>Ubuntu 22.04</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 的安裝及常用設置</title>
    <link href="/2023/12/01/MySQL-%E7%9A%84%E5%AE%89%E8%A3%9D%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%A8%AD%E7%BD%AE/"/>
    <url>/2023/12/01/MySQL-%E7%9A%84%E5%AE%89%E8%A3%9D%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%A8%AD%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>在 Ubuntu 22.04 上安裝 MySQL 8：</p><ol><li><p>更新系統：使用下面的命令更新系統。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure></li><li><p>安裝 MySQL 8：使用下面的命令安裝 MySQL 8。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo apt install mysql-server<br></code></pre></td></tr></table></figure></li><li><p>配置 MySQL：安裝完成後，系統會自動啟動 MySQL 服務，然後可以運行下面的命令來配置 MySQL。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo mysql_secure_installation<br></code></pre></td></tr></table></figure></li><li><p>在配置過程中，您需要設置 MySQL root 用戶的密碼，並可以選擇禁用匿名用戶、禁用遠程 root 登錄等選項。</p></li><li><p>启动MySQL服务：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo service mysql start<br></code></pre></td></tr></table></figure></li></ol><p>在 Rocky Linux 9 上安裝 MySQL 8：</p><ol><li><p>更新系統：使用下面的命令更新系統。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo dnf update<br></code></pre></td></tr></table></figure></li><li><p>安裝 MySQL 8：使用下面的命令安裝 MySQL 8。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo dnf install mysql-server<br></code></pre></td></tr></table></figure></li><li><p>配置 MySQL：安裝完成後，系統會自動啟動 MySQL 服務，然後可以運行下面的命令來配置 MySQL。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo mysql_secure_installation<br></code></pre></td></tr></table></figure></li><li><p>在配置過程中，您需要設置 MySQL root 用戶的密碼，並可以選擇禁用匿名用戶、禁用遠程 root 登錄等選項。</p></li><li><p>启动MySQL服务：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo systemctl start mysqld<br></code></pre></td></tr></table></figure></li></ol><h1 id="mysql-secure-installation-設置"><a href="#mysql-secure-installation-設置" class="headerlink" title="mysql_secure_installation 設置"></a>mysql_secure_installation 設置</h1><p>以下是MySQL 8中mysql_secure_installation的設置命令行下輸出範例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">Securing the MySQL server deployment.<br><br>Enter password for user root: <br><br>The existing password for the user account root has expired. Please set a new password.<br><br>New password: <br><br>Re-enter new password: <br><br>Estimated strength of the password: 100 <br><br>Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y<br>By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment.<br><br>Remove anonymous users? (Press y|Y for Yes, any other key for No) : y<br>Success.<br><br><br>Normally, root should only be allowed to connect from &#x27;localhost&#x27;. This ensures that someone cannot guess at the root password from the network.<br><br>Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y<br>Success.<br><br>By default, MySQL comes with a database named &#x27;test&#x27; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment.<br><br>Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y<br>- Dropping test database...<br>Success.<br><br>- Removing privileges on test database...<br>Success.<br><br>Reloading the privilege tables will ensure that all changes made so far will take effect immediately.<br><br>Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y<br>Success.<br><br>All done!<br></code></pre></td></tr></table></figure><p>上述範例演示了使用mysql_secure_installation命令進行MySQL 8的安全設置的過程。該命令會提示用戶設置新的root用戶密碼，禁用匿名用戶、禁用遠程root登錄以及刪除測試數據庫和相關權限。完成後，系統會重新加載權限表使更改立即生效。</p><h1 id="創建管理帳號"><a href="#創建管理帳號" class="headerlink" title="創建管理帳號"></a>創建管理帳號</h1><ol><li><p>打开终端或命令提示符，并使用以下命令登录到MySQL服务器：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">mysql -u root -p<br></code></pre></td></tr></table></figure><p> 输入MySQL root用户的密码以登录。</p></li><li><p>创建一个新的MySQL用户，可以使用以下命令：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">CREATE USER &#x27;username&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;<br></code></pre></td></tr></table></figure><p> 注意替换<code>username</code>和<code>password</code>为您希望创建的用户名和密码。</p></li><li><p>授予新用户全部管理权限，可以使用以下命令：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">GRANT ALL PRIVILEGES ON *.* TO &#x27;username&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;<br></code></pre></td></tr></table></figure><p> 这将赋予新用户对所有数据库和所有表的全部管理权限。</p></li><li><p>刷新MySQL权限，使更改立即生效：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p> 这将重新加载权限表，使新的用户和权限立即生效。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技術文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php.ini 常用參數設置</title>
    <link href="/2023/11/30/php-ini-%E5%B8%B8%E7%94%A8%E5%8F%83%E6%95%B8%E8%A8%AD%E7%BD%AE/"/>
    <url>/2023/11/30/php-ini-%E5%B8%B8%E7%94%A8%E5%8F%83%E6%95%B8%E8%A8%AD%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="php-ini-檔案位置"><a href="#php-ini-檔案位置" class="headerlink" title="php.ini 檔案位置"></a>php.ini 檔案位置</h1><p>php.ini 通常被放置在以下目錄中：</p><ul><li>&#x2F;etc&#x2F;php.ini (主要的目錄)</li><li>&#x2F;etc&#x2F;php&#x2F;版本號&#x2F;php.ini (取決於特定的發行版)</li><li>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php.ini (某些系統可能使用此目錄)</li></ul><p>如果您無法找到 php.ini 檔案，可以執行以下命令確定其位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php -i | grep &quot;Loaded Configuration File&quot;<br></code></pre></td></tr></table></figure><p>這將輸出 php.ini 檔案的完整路徑。</p><h1 id="文件上傳相關"><a href="#文件上傳相關" class="headerlink" title="文件上傳相關"></a>文件上傳相關</h1><p>在 php.ini 文件中，有一些相關的參數可以設置文件上傳的相關限制。以下是一些常用的參數：</p><ol><li>upload_max_filesize：設置允許的最大文件大小，預設值為2M。可以使用以下格式：’10M’、’500K’、’500’（表示500字節）。</li><li>post_max_size：設置能夠接收的最大 POST 數據量，預設值為8M。此值必須大於等於 upload_max_filesize，以確保文件上傳不會超過此限制。</li><li>max_file_uploads：設置一次最多允許上傳的文件數量，預設值為20。</li><li>upload_tmp_dir：設置文件上傳時的臨時目錄，預設為系統臨時目錄。</li><li><strong>max_input_vars</strong>：允許一次 POST 請求中傳入的變數數量。默認值為 1000。</li></ol><p>您可以在 php.ini 文件中找到這些參數，並根據您的需求進行修改。修改後，您需要重新啟動網頁伺服器才能使其生效。</p><p>另外，值得注意的是，上傳文件還受到伺服器的其他限制，如操作系統的文件大小限制、網頁伺服器的限制等。如果遇到文件上傳相關問題，請確保檢查並修改這些限制。</p><h1 id="數據處理"><a href="#數據處理" class="headerlink" title="數據處理"></a>數據處理</h1><p>在php.ini文件中，有一些与数据处理相关的参数可以设置。以下是一些常用的参数：</p><ol><li>memory_limit：设置脚本最大允许占用的内存量。默认值为128M。可以使用以下格式：’256M’、’2G’（表示2GB）。</li><li>max_execution_time：设置脚本最大执行时间，单位为秒。默认值为30秒。</li><li>max_input_time：设置脚本最大执行时间，单位为秒。默认值为60秒。</li><li><strong>output_buffering</strong>：PHP 輸出是否使用緩衝區。默認值為 On。</li></ol><h1 id="重要參數"><a href="#重要參數" class="headerlink" title="重要參數"></a>重要參數</h1><p>php.ini错误提示参数:</p><p>在php.ini文件中，有一些与错误提示相关的参数可以设置。以下是一些常用的参数：</p><ol><li>display_errors：设置是否显示PHP错误信息。默认值为On，表示显示错误信息。如果设置为Off，则不会显示错误信息。</li><li>error_reporting：设置报告哪些PHP错误。可以通过使用错误报告级别标志来设置，如E_ALL表示报告所有错误，E_ERROR表示报告致命错误等。</li><li>log_errors：设置是否将PHP错误信息记录到错误日志文件中。默认值为On，表示会记录错误信息。如果设置为Off，则不会记录错误信息。</li><li>error_log：设置错误日志文件的路径。可以将错误信息记录到指定的日志文件中。</li></ol><p>此外，还可以通过在代码中使用ini_set函数来动态修改这些参数的值，而不必修改php.ini文件。例如，使用ini_set(‘display_errors’, ‘Off’)可以关闭错误信息的显示。</p><h1 id="日期參數"><a href="#日期參數" class="headerlink" title="日期參數"></a>日期參數</h1><p>在php.ini文件中，有一些与日期相关的参数可以设置。以下是一些常用的参数：</p><ol><li>date.timezone：设置服务器的时区。默认值为UTC。可以通过设置合适的时区来确保日期和时间显示正确。</li><li>strtotime：设置一个日期&#x2F;时间字符串，以Unix时间戳的形式返回。常用于日期的计算和转换。</li><li>date.default_latitude：设置默认的纬度值。</li><li>date.default_longitude：设置默认的经度值。</li><li>date.sunrise_zenith：设置日出的黄道仰角。</li><li>date.sunset_zenith：设置日落的黄道仰角。</li></ol><h1 id="Seesion參數"><a href="#Seesion參數" class="headerlink" title="Seesion參數"></a>Seesion參數</h1><p>在php.ini文件中，有一些与会话（session）相关的参数可以设置。以下是一些常用的参数：</p><ol><li>session.save_handler：设置会话数据的保存处理程序。默认值为files，表示会将会话数据保存到文件中。其他可能的值还包括memcached和redis等，表示使用相应的缓存系统来保存会话数据。</li><li>session.save_path：设置会话数据的保存路径。默认值为””，表示使用系统默认的临时目录。可以将其设置为一个特定的目录路径来自定义会话数据的保存位置。</li><li><a href="http://session.name/">session.name</a>：设置会话的名称。默认值为PHPSESSID。可以通过修改此值来避免与其他应用程序的会话冲突。</li><li>session.cookie_lifetime：设置会话cookie的生命周期，单位为秒。默认值为0，表示会话cookie在浏览器关闭时过期。可以将其设置为一个正整数来指定会话cookie的生命周期。</li><li>session.gc_maxlifetime：设置会话数据的最大生命周期，单位为秒。默认值为1440，表示会话数据在1440秒后过期。可以将其设置为一个正整数来指定会话数据的最大生命周期。</li><li>session.gc_probability：设置会话垃圾回收的概率。默认值为1，表示每个会话请求都有1%的概率触发会话垃圾回收。可以将其设置为一个介于0和100之间的整数来调整会话垃圾回收的触发概率。</li><li>session.gc_divisor：设置会话垃圾回收的分母。默认值为100，表示每个请求都会被除以100来计算触发会话垃圾回收的概率。可以将其设置为一个正整数来调整触发概率的计算。</li></ol><p>.user.ini 參數</p><p>.user.ini 文件是 PHP 7.1.0 版本中引入的一种用户级别的配置文件。它类似于 php.ini 文件，但只适用于当前用户的虚拟主机或目录。</p><p>.user.ini 文件的位置：</p><ul><li>在用户主目录下的 public_html 文件夹中</li><li>在用户的特定虚拟主机目录中</li></ul><p>.user.ini 文件中可以设置的参数与 php.ini 文件相同，包括文件上传相关的参数、数据处理相关的参数、错误提示相关的参数、日期相关的参数以及会话（session）相关的参数等。</p><p>注意：</p><ul><li>.user.ini 文件只适用于 PHP 7.1.0 及以上版本。</li><li>.user.ini 文件可以覆盖 php.ini 文件中的相同参数设置。</li><li>修改 .user.ini 文件后，您需要重新启动网页服务器才能使其生效。</li></ul>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo 搭建免費 Blog</title>
    <link href="/2023/11/30/%E4%BD%BF%E7%94%A8-Hexo-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B2%BB-Blog/"/>
    <url>/2023/11/30/%E4%BD%BF%E7%94%A8-Hexo-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B2%BB-Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h1><ol><li><p>安裝Node.js：</p><ul><li>開啟終端機（Terminal）。</li><li>輸入以下指令安裝Node.js和npm：</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo apt-get update<br>sudo apt-get install nodejs<br>sudo apt-get install npm<br></code></pre></td></tr></table></figure></li><li><p>安裝Git：</p><ul><li>在終端機中輸入以下指令安裝Git：</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo apt-get install git<br></code></pre></td></tr></table></figure></li><li><p>安裝Hexo：</p><ul><li>使用npm安裝Hexo命令行工具，請在終端機中輸入以下指令：</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs other">sudo npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li></ol><h1 id="創建-Blog"><a href="#創建-Blog" class="headerlink" title="# 創建 Blog"></a># 創建 Blog</h1><p>使用以下指令創建一個新的Hexo博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br><span class="hljs-built_in">cd</span> myblog<br>npm install<br><span class="hljs-comment"># 安裝部署</span><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>這將會在當前目錄下創建一個名為myblog的文件夾，並初始化Hexo博客的結構和配置文件。</p><p>配置博客</p><p>打開myblog文件夾，找到_config.yml文件並使用文本編輯器打開它。</p><p>根據個人需求，修改以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: My Blog <span class="hljs-comment"># 博客的標題</span><br>subtitle: Hexo is awesome! <span class="hljs-comment"># 博客的副標題</span><br>description: My personal blog powered by Hexo <span class="hljs-comment"># 博客的描述</span><br>author: Your Name <span class="hljs-comment"># 博客的作者名稱</span><br>url: https://yourblog.com <span class="hljs-comment"># 博客的URL</span><br>deploy:<br><span class="hljs-built_in">type</span>: git<br>repo: https://github.com/yourusername/yourusername.github.io.git <span class="hljs-comment"># 部署到GitHub Pages的倉庫URL</span><br>branch: main<br></code></pre></td></tr></table></figure><p>注意：如果您使用其他的部署方式，可以修改deploy的配置。</p><p>創建一篇新文章</p><p>使用以下指令在source&#x2F;_posts文件夾中創建一篇新的Markdown格式的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;Hello Hexo&quot;</span><br></code></pre></td></tr></table></figure><p>這將會在source&#x2F;_posts文件夾中創建一個名為hello-hexo.md的文件。</p><p>編寫文章</p><p>使用文本編輯器打開hello-hexo.md文件，並在文件中編寫文章內容。</p><p>生成靜態文件</p><p>使用以下指令生成靜態文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>這將會在public文件夾中生成靜態文件。</p><p>預覽博客</p><p>使用以下指令在本地啟動Hexo伺服器，預覽博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>在瀏覽器中打開<a href="http://localhost:4000，即可預覽您的博客。">http://localhost:4000，即可預覽您的博客。</a></p><h1 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h1><p>部署到 Github 需要先在 Github 上創建一個新的 repository，然後將 Hexo 博客源碼推送到該 repository 上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean (清除生成的靜態文件)<br>hexo generate (生成新的靜態文件)<br>hexo deploy (部署到 GitHub)<br></code></pre></td></tr></table></figure><p>當部署完成後，您的博客將會被推送到您指定的 Github repository 上。在瀏覽器中打開該 repository 的 URL，即可訪問您的博客。</p><h1 id="部署到-Vercel-Server"><a href="#部署到-Vercel-Server" class="headerlink" title="部署到 Vercel Server"></a>部署到 Vercel Server</h1><p>要將Hexo部署到Vercel，需要按照以下步驟進行操作：</p><ol><li>在Vercel上創建帳號，並登錄到Vercel控制台。</li><li>在Vercel控制台中，點擊”New Project”創建一個新的項目。</li><li>選擇從Git Repository（例如GitHub、GitLab等）創建項目。</li><li>授予Vercel訪問您的Git Repository的權限，並選擇要部署的Repository。</li><li>確認項目設置（例如項目名稱和部署設置）。</li><li>確認設置後，Vercel將自動部署您的Hexo博客。</li><li>部署完成後，您可以在Vercel控制台中查看部署的狀態和URL。</li><li>在瀏覽器中打開URL，即可訪問您的Hexo博客。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/29/hello-world/"/>
    <url>/2023/11/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
